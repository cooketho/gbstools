GBStools tutorial
2015-08-06
Tom Cooke cooketho@gmail.com

The first part of this tutorial describes how to simulate a GBS data set
and run GBStools on it. The second part describes how to prepare input files
for running GBStools on actual datasets.

Part 1: Simulating GBS data.
============================

1) Download and install the program "ms":
http://home.uchicago.edu/rhudson1/source/mksamples.html

2) Generate simulated genetic data with ms (or use gbstools/test/sim.n100.theta0.001.ms). 
For example, for N=100 diploid samples, we will draw 200 simulated haplotypes at 
100 loci. We will assume the per-nucleotide population mutation rate is 0.001.
Since we will assume each locus is 500 bp long, we will set the -t (theta) 
parameter to 0.001 * 500 = 0.5. 

    ms 200 100 -t 0.5 > sim.n100.theta0.001.ms

3) Parse the ms output and convert it to simulated GBS data. We'll simulate 
500 bp fragments flanked by 6 bp restriction sites. Allelic dropout can occur when there
is a SNP within these flanking 6 bp sites, or if there is a variable restriction site
somewhere in the middle of the fragment. In this example each base in the middle of the 
fragment has probability = 0.0074 of being located in a restriction site (based on the
empirical frequency of BsaXI, CspCI, and BpuEI restriction sites in the human genome), 
and if the internal restriction site has a SNP in it, it is assumed to cause allelic dropout.
The simulator is for paired-end reads, and the read length is set to 101 bp. Sites with
more than 25% missing genotypes are excluded (--missing parameter).

   simulate_gbs_vcf.py -i sim.n100.theta0.001.ms --frag_len 500 --site_len 6 --site_prob 0.0074 --read_len 101 --missing 0.25 --sampled_only > sim.n100.theta0.001.vcf

4) Simulate GBS coverage. Mean coverage is set to 100X (--lambda parameter). The dispersion 
index of the negative binomial distribution used to simulate coverage is set to 2.5 
(--dispersion_mean), and the sequencing error rate is set to 0.001 (--epsilon).
   
   cat sim.n100.theta0.001.vcf | simulate_dp.py --lambda 100 --dispersion_mean 2.5 --epsilon 0.001 > sim.n100.theta0.001.dp_100.vcf

5) Run GBStools

   polymorphism_test.py -i sim.n100.theta0.001.dp_100.vcf -o sim.n100.theta0.001.dp_100.scored.vcf

6) Extract data to tab-delimited format.

   cat sim.n100.theta0.001.dp_100.scored.vcf | extract_vcf_info.py > sim.n100.theta0.001.dp_100.scored.txt


Part 2: Preparing input files and running GBStools
==================================================

GBStools comes packaged with a toy data set (located in gbstools/test/):

sim.fa                          100 kb simulated chromosome.
sim.digest.bed                  List of ApeKI restriction sites in sim.fa.
sim.digest.gbsbed               Same as BED file but with added info such as fragment size.
{0..9}.bam                      101-bp GBS reads mapped to these ApeKI sites.
{0..9}.annotated.bam            Same as BAM files, but with restriction site annotations.
{0..9}.rs_mapping_summary 	Summary of restriction site mapping in annotated bam files.
sim.vcf                         SNPs called from these alignments with GATK.
sim.ped.vcf                     SNPs from a nuclear family.

Follow the steps below to re-create the toy data set. You will do many
of the same steps with your own GBS data. Steps marked with ``*`` have
already been done for you.

1) First put the scripts in gbstools/bin somewhere suitable:

mkdir /usr/local/bin/gbstools
cp bin/* /usr/local/bin/gbstools
   
   Add this directory to your PATH environmental variable:
   
PATH=/usr/local/bin/gbstools:$PATH

   Also, install tabix and bgzip if you don't already have them:
   https://sourceforge.net/projects/samtools/files/tabix/
   And Install a program for doing in-silico digests, e.g. emboss restrict:
   http://emboss.sourceforge.net/download/

2) Make a BED file of restriction sites in the reference genome
    (e.g. with the `emboss restrict` command).

restrict -sequence sim.fa -enzymes ApeKI -outfile sim.digest -sitelen 2
cat sim.digest | sed 's/TseI/ApeKI/' | digest_to_bed.py > sim.digest.bed

3) Convert restriction site BED file to GBS-BED format and index with tabix.
   (see footnote **)

cat sim.digest.bed | make_gbsbed.py > sim.digest.gbsbed
cat sim.digest.gbsbed | bgzip -c > sim.digest.gbsbed.gz
tabix -p bed sim.digest.gbsbed.gz

*4) Map your reads to the reference genome and call SNPs with your
    favorite SNP-caller (e.g. GATK, samtools etc), resulting in a
    vcf file of SNPs (sim.vcf in the toy data set).

5) Annotate the aligned reads with restriction site information
   and index the annotated bam files (e.g. with samtools).

for i in {0..9};do
samtools index ${i}.bam
annotate_se_bam.py -i ${i}.bam -o ${i}.annotated.bam -b sim.digest.gbsbed.gz
samtools index ${i}.annotated.bam
done

6) Summarize the mapping of reads to restriction sites.

for i in {0..9};do
mapping_summary.py -i ${i}.annotated.bam > ${i}.rs_mapping_summary
done

6) Make a list of samples and bam files, and a list of summaries.

for i in {0..9};do
echo -e "${i}\t${i}.annotated.bam" >> bamlist.txt
echo -e "${i}\t${i}.rs_mapping_summary" >> summaries.txt
done

7) Calculate the depth-of-coverage normalization factors.

normfactors.py --summaries summaries.txt > normfactors.txt

8) Perform GBStools likelihood ratio test on your SNPs to test
   for restriction site variants (normalization factors default
   (to 1.0 when a normfactors file is not provided).

polymorphism_test.py -i sim.vcf -o sim.lrt.vcf -b bamlist.txt


And that's that! 

To run GBStools in pedigree mode for nuclear families, supply 
a PLINK-formatted PED file for two parents and their offspring 
with the --ped option in polymorphism_test.py

To change the default index of dispersion for read coverage 
used in the GBStools model, use the -d option. As -d approaches
1.0 (Poisson) the model becomes more sensitive, but specificity
may suffer. You may want to try out several different values
to find what works best with your data.

To run the model in DP-only mode (i.e. without considering
base likelihoods) use the --dpmode switch.


** The following enzymes are supported by defualt in make_gbsbed.py:
Elshire et al (2011) ApeKI
Poland et al (2012) PstI + MspI
Cooke et al (in preparation) BpuEI + BsaXI + CspCI
Baird et al (2008) EcoRI + SbfI
Petersen et al (2012) EcoRI + MspI

If you don't see your enzyme in the list, or you want to manually specify
the distance from the recognition site where fwd and rev reads will map,
you can make an offsets file with format:

    #enzyme_name    strand    read_is_reverse    offset
    ApeKI	    +	      1			 3
    ApeKI	    +	      0			 1
    .		    .	      .			 . 
    .		    .	      .			 .

where ``read_is_reverse`` is True (1) for reverse reads and False (0)
for forward reads. Then use:

cat sim.digest.bed | make_gbsbed.py --ligation_offsets <myoffsets> > sim.digest.gbsbed
